#!/bin/bash

# Copyright (c) 2017  Eddie Antonio Santos <easantos@ualberta.ca>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -u

################################# Test Cases #################################
imgcat_tests() {
    #           command that should succeed
    assert_ok   imgcat --width=12 Xterm_256color_chart.png

    #           expected output     command
    assert_eq   1px_256_table.out   imgcat -d 256 1px_256_table.png
    assert_eq   1px_8_table.out     imgcat -d 8 1px_8_table.png
    assert_eq   1px_8_table.out     imgcat -d ansi 1px_8_table.png
    assert_eq   1px_256_iterm2.out  imgcat -d iterm2 1px_256_table.png
    assert_eq   1px_grey_table.out  imgcat -d 256 1px_grey_table.png

    # Test option aliases
    assert_eq   1px_256_table.out   imgcat --256 1px_256_table.png
    assert_eq   1px_8_table.out     imgcat --ansi 1px_8_table.png
    assert_eq   1px_8_table.out     imgcat --8 1px_8_table.png
    assert_eq   1px_256_iterm2.out  imgcat --iterm2 1px_256_table.png

    # Test invocations that should fail
    assert_fail imgcat
    assert_fail imgcat --width=-3 "$ANY_IMAGE"
    assert_fail imgcat -w mank3y "$ANY_IMAGE"
    assert_fail imgcat --fake-option

    # Test that we can pipe in images and have them render
    assert_eq   1px_256_table.out   pipe 1px_256_table.png "$IMGCAT" --256
}


############################### Test Framework ###############################

# Parallel arrays of invocations (the command line), and its output.
declare -a INVOCATIONS
declare -a OUTPUT
declare -a STDERR

# Array of indices to invocations, output, stderr.
declare -a FAILURES=()

ORIGINAL_DIR="$(pwd)"
SCRIPT_DIR="$(dirname "$0")"

# Get the absolute path to the given binary
IMGCAT="$(realpath "$1")"
ANY_IMAGE=1px_8_table.png

ANSI_RED="$(tput setaf 1)"
ANSI_GRN="$(tput setaf 2)"
ANSI_RST="$(tput sgr0)"

assert_ok() {
    _assert "$@" || _add_failure
    return 0
}

assert_fail() {
    _assert "$@" && _add_failure
    return 0
}

assert_eq() {
    local expected="$1"; shift;
    _assert "$@" || {
        _add_failure
        return 0
    }

    local -i last
    last=$(( ${#OUTPUT[@]} - 1))
    diff "$expected" - <<<"${OUTPUT[$last]}" >/dev/null || _add_failure
    return 0
}

_assert() {
    local output stderr bin
    local -i status
    bin="${1/imgcat/$IMGCAT}"
    shift
    output="$(mktemp)"
    stderr="$(mktemp)"

    # Run the command
    "$bin" "$@" >"$output" 2>"$stderr"
    status=$?
    INVOCATIONS+=("$bin $*")
    OUTPUT+=("$(cat "$output")")
    STDERR+=("$(cat "$stderr")")

    unlink "$output"
    unlink "$stderr"

    return $status
}

_add_failure() {
    local -i items="${#INVOCATIONS[@]}"
    FAILURES+=("$((items - 1))")
}

# Can't specify command line redirection in assert commands,
# so use this to do it for use.
pipe() {
    local filename="$1"; shift;
    <"$filename" "$@"
}


print_success() {
    echo "${ANSI_GRN}$ncases tests passed${ANSI_RST}"
}

print_failures() {
    for index in "${FAILURES[@]}"; do
        echo "Failed: ${INVOCATIONS[$index]}"
        echo "=== stderr ==="
        echo "${STDERR[$index]}"
        echo "=== output ==="
        echo "${OUTPUT[$index]}"
    done

    echo "${ANSI_RED}$nfailures/$ncases tests failed${ANSI_RST}"
}

# Run the tests in test-cases
cd "$SCRIPT_DIR" && imgcat_tests && cd "$ORIGINAL_DIR" || exit

declare -i nfailures="${#FAILURES[@]}"
declare -i ncases="${#INVOCATIONS[@]}"
if ((nfailures > 0)); then
    print_failures
    exit 1
else
    print_success
fi
